version: '3.8'

services:
  # Main Application
  qasd-app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: qasd-app
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${API_URL}
      - VITE_APP_VERSION=${APP_VERSION}
    volumes:
      - ./ssl:/etc/ssl/certs:ro
      - ./logs:/var/log/nginx
      - ./uploads:/app/uploads
    networks:
      - qasd-network
    depends_on:
      - qasd-api
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Server
  qasd-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: qasd-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - CLOUD_STORAGE_BUCKET=${CLOUD_STORAGE_BUCKET}
      - CLOUD_STORAGE_KEY=${CLOUD_STORAGE_KEY}
      - MONITORING_ENDPOINT=${MONITORING_ENDPOINT}
    volumes:
      - ./uploads:/app/uploads
      - ./backups:/app/backups
      - ./logs:/app/logs
    networks:
      - qasd-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: qasd-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/db:/backups
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - qasd-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: qasd-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - qasd-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: qasd-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - qasd-network

  grafana:
    image: grafana/grafana:latest
    container_name: qasd-grafana
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - qasd-network
    depends_on:
      - prometheus

  # Log Management
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: qasd-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - qasd-network
    ports:
      - "9200:9200"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: qasd-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/var/log/app:ro
    networks:
      - qasd-network
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: qasd-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - qasd-network
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  # Backup Service
  backup-service:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: qasd-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      - BACKUP_RETENTION=${BACKUP_RETENTION:-30}        # Keep 30 days
      - DATABASE_URL=${DATABASE_URL}
      - CLOUD_STORAGE_BUCKET=${BACKUP_BUCKET}
      - CLOUD_STORAGE_KEY=${BACKUP_STORAGE_KEY}
      - ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    volumes:
      - ./backups:/app/backups
      - postgres_data:/data/postgres:ro
      - redis_data:/data/redis:ro
      - ./uploads:/data/uploads:ro
    networks:
      - qasd-network
    depends_on:
      - postgres
      - redis

  # Load Balancer (for scaling)
  nginx-lb:
    image: nginx:alpine
    container_name: qasd-nginx-lb
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./config/nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    networks:
      - qasd-network
    depends_on:
      - qasd-app

  # Security Scanner
  security-scanner:
    build:
      context: ./security
      dockerfile: Dockerfile
    container_name: qasd-security
    restart: unless-stopped
    environment:
      - SCAN_SCHEDULE=${SECURITY_SCAN_SCHEDULE:-0 3 * * *}  # Daily at 3 AM
      - ALERT_WEBHOOK=${SECURITY_ALERT_WEBHOOK}
    volumes:
      - ./security/reports:/app/reports
      - ./logs:/app/logs:ro
    networks:
      - qasd-network
    depends_on:
      - qasd-app
      - qasd-api

  # Auto-scaling Service
  autoscaler:
    build:
      context: ./autoscaler
      dockerfile: Dockerfile
    container_name: qasd-autoscaler
    restart: unless-stopped
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - MIN_REPLICAS=${MIN_REPLICAS:-1}
      - MAX_REPLICAS=${MAX_REPLICAS:-5}
      - CPU_THRESHOLD=${CPU_THRESHOLD:-70}
      - MEMORY_THRESHOLD=${MEMORY_THRESHOLD:-80}
      - SCALE_UP_COOLDOWN=${SCALE_UP_COOLDOWN:-300}
      - SCALE_DOWN_COOLDOWN=${SCALE_DOWN_COOLDOWN:-600}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/autoscaler.yml:/app/config.yml:ro
    networks:
      - qasd-network
    depends_on:
      - prometheus

  # Health Check Service
  healthcheck:
    build:
      context: ./healthcheck
      dockerfile: Dockerfile
    container_name: qasd-healthcheck
    restart: unless-stopped
    environment:
      - CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30}
      - ALERT_WEBHOOK=${HEALTH_ALERT_WEBHOOK}
      - SERVICES=qasd-app,qasd-api,postgres,redis
    volumes:
      - ./config/healthcheck.yml:/app/config.yml:ro
    networks:
      - qasd-network
    depends_on:
      - qasd-app
      - qasd-api
      - postgres
      - redis

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/grafana
  
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/elasticsearch

networks:
  qasd-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Production deployment configuration
# This file defines the complete production infrastructure including:
# - Main application with SSL termination
# - API server with health checks
# - PostgreSQL database with backup volumes
# - Redis cache for session management
# - Monitoring stack (Prometheus, Grafana)
# - Log management (ELK stack)
# - Automated backup service
# - Load balancer for scaling
# - Security scanner
# - Auto-scaling service
# - Health check monitoring
#
# Usage:
# 1. Copy .env.production.example to .env.production
# 2. Configure all environment variables
# 3. Set up SSL certificates in ./ssl/
# 4. Run: docker-compose -f docker-compose.prod.yml up -d
# 5. Monitor logs: docker-compose -f docker-compose.prod.yml logs -f
#
# Scaling:
# docker-compose -f docker-compose.prod.yml up -d --scale qasd-app=3
#
# Backup:
# docker-compose -f docker-compose.prod.yml exec backup-service /app/backup.sh
#
# Security scan:
# docker-compose -f docker-compose.prod.yml exec security-scanner /app/scan.sh