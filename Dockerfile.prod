# Multi-stage build for production optimization
# Stage 1: Build the application
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install dependencies
RUN npm ci --only=production --silent

# Copy source code
COPY . .

# Build arguments
ARG NODE_ENV=production
ARG VITE_API_URL
ARG VITE_APP_VERSION
ARG VITE_ANALYTICS_ID
ARG VITE_SENTRY_DSN

# Set environment variables
ENV NODE_ENV=$NODE_ENV
ENV VITE_API_URL=$VITE_API_URL
ENV VITE_APP_VERSION=$VITE_APP_VERSION
ENV VITE_ANALYTICS_ID=$VITE_ANALYTICS_ID
ENV VITE_SENTRY_DSN=$VITE_SENTRY_DSN

# Build the application
RUN npm run build

# Run tests
RUN npm run test:ci

# Stage 2: Production server
FROM nginx:alpine AS production

# Install additional packages
RUN apk add --no-cache \
    curl \
    jq \
    openssl \
    certbot \
    certbot-nginx

# Create nginx user and directories
RUN addgroup -g 1001 -S nginx-app && \
    adduser -S nginx-app -u 1001 -G nginx-app

# Create necessary directories
RUN mkdir -p /var/cache/nginx \
    /var/log/nginx \
    /etc/nginx/conf.d \
    /etc/ssl/certs \
    /var/www/html \
    /app/uploads \
    /app/backups

# Copy built application
COPY --from=builder /app/dist /var/www/html

# Copy nginx configuration
COPY config/nginx.prod.conf /etc/nginx/nginx.conf
COPY config/nginx-default.conf /etc/nginx/conf.d/default.conf

# Copy SSL configuration template
COPY config/ssl.conf /etc/nginx/conf.d/ssl.conf.template

# Copy security headers configuration
COPY config/security-headers.conf /etc/nginx/conf.d/security-headers.conf

# Copy health check script
COPY scripts/health-check.sh /usr/local/bin/health-check.sh
RUN chmod +x /usr/local/bin/health-check.sh

# Copy startup script
COPY scripts/docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Copy SSL certificate generation script
COPY scripts/generate-ssl.sh /usr/local/bin/generate-ssl.sh
RUN chmod +x /usr/local/bin/generate-ssl.sh

# Set proper permissions
RUN chown -R nginx-app:nginx-app /var/www/html \
    /var/cache/nginx \
    /var/log/nginx \
    /app

# Create nginx.pid file with proper permissions
RUN touch /var/run/nginx.pid && \
    chown nginx-app:nginx-app /var/run/nginx.pid

# Expose ports
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# Switch to non-root user
USER nginx-app

# Start nginx
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]

# Metadata
LABEL maintainer="QASD Team" \
      version="1.0.0" \
      description="QASD Production Application" \
      org.opencontainers.image.title="QASD" \
      org.opencontainers.image.description="Quality Assurance System Dashboard" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="QASD Team" \
      org.opencontainers.image.licenses="MIT"